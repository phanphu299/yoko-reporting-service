{
	"info": {
		"_postman_id": "301c50fc-82c8-4c9a-8868-b9f7115af47b",
		"name": "Reporting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9004244"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "001_Authentication",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('access_token');\r",
									"    pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{sa_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{sa_client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{idp}}/connect/token",
							"host": [
								"{{idp}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule - Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get user return status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Get User\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"data\");\r",
									"    pm.environment.set(\"contact_user_id\", json.data[0].id);\r",
									"    pm.environment.set(\"contact_user_upn\", json.data[0].upn);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"filter\": \"{\\\"and\\\":[{\\\"queryKey\\\":\\\"upn.ToLower()\\\",\\\"operation\\\":\\\"eq\\\",\\\"queryType\\\":\\\"text\\\",\\\"queryValue\\\":\\\"thanh.tran@yokogawa.com\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-service}}/usr/users/search",
							"host": [
								"{{user-service}}"
							],
							"path": [
								"usr",
								"users",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule - Setup Schedule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has return status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Has success response\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.has.property('id');\r",
									"    const id = json.id;\r",
									"    pm.environment.set(\"schedule_id\", id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test {{$guid}}\",\r\n    \"description\": \"description\",\r\n    \"timeRanges\": [\r\n        {\r\n            \"startTime\": \"09:00:00\",\r\n            \"endTime\": \"12:00:00\",\r\n            \"daysOfWeek\": [\r\n                \"DOW_MON\"\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-service}}/usr/schedules",
							"host": [
								"{{user-service}}"
							],
							"path": [
								"usr",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule - Setup Contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has return status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Has success response\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.has.property('id');\r",
									"    const id = json.id;\r",
									"    pm.environment.set(\"contact_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"test_{{$timestamp}}_{{$guid}}\",\r\n    \"Type\": \"EMAIL\",\r\n    \"Detail\": \"{{contact_user_upn}}\",\r\n    \"Status\": true,\r\n    \"TimezoneId\": 108,\r\n    \"Schedules\": [\"{{schedule_id}}\"],\r\n    \"DelayAfterTrigger\": 10,\r\n    \"DelayBetweenActions\": 10,\r\n    \"Retries\": 5,\r\n    \"DelayBetweenRetries\": 10,\r\n    \"UserId\": \"{{contact_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-service}}/usr/contacts",
							"host": [
								"{{user-service}}"
							],
							"path": [
								"usr",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule - Setup Contact Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has return status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Has success response\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.has.property('id');\r",
									"    const id = json.id;\r",
									"    pm.environment.set(\"contact_group_id\", id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"contact_group_{{$guid}}\",\r\n    \"description\": \"Contact Group 1\",\r\n    \"contactIds\" : [\"{{contact_id}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-service}}/usr/contacts/groups",
							"host": [
								"{{user-service}}"
							],
							"path": [
								"usr",
								"contacts",
								"groups"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MockData",
			"item": [
				{
					"name": "Upsert mock data (single array)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"data_id_1\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"record 1\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"record 2\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"name\": \"record 3\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mock data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"mock_data_get_url\", pm.environment.get('function_host') + '/fnc/rpt/mockdata/' + pm.environment.get('data_id_1'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{function_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata/{{data_id_1}}",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata",
								"{{data_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mock data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{function_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata/{{data_id_1}}",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata",
								"{{data_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upsert mock data (multiple arrays)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"data_id_2\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"array1\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"name 1\"\r\n        },\r\n        {\r\n            \"id\": 2,\r\n            \"name\": \"name 2\"\r\n        },\r\n        {\r\n            \"id\": 3,\r\n            \"name\": \"name 3\"\r\n        }\r\n    ],\r\n    \"array2\": [\r\n        {\r\n            \"code\": \"code1\",\r\n            \"description\": \"description 3\"\r\n        },\r\n        {\r\n            \"code\": \"code2\",\r\n            \"description\": \"description 4\"\r\n        },\r\n        {\r\n            \"code\": \"code3\",\r\n            \"description\": \"description 5\"\r\n        }\r\n    ],\r\n    \"array3\": [\r\n        {\r\n            \"id\": 11,\r\n            \"name\": \"record 11\"\r\n        },\r\n        {\r\n            \"id\": 12,\r\n            \"name\": \"record 12\"\r\n        },\r\n        {\r\n            \"id\": 13,\r\n            \"name\": \"\" // empty\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mock data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"mock_data_post_url\", pm.environment.get('function_host') + '/fnc/rpt/mockdata/' + pm.environment.get('data_id_2'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{function_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata/{{data_id_2}}",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata",
								"{{data_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upsert mock data overridden (multiple arrays)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"data_id_3\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"array1\": [\r\n        {\r\n            \"id\": 110,\r\n            \"name\": \"name 1 - overridden\"\r\n        },\r\n        {\r\n            \"id\": 120,\r\n            \"name\": \"name 2 - overridden\"\r\n        },\r\n        {\r\n            \"id\": 130,\r\n            \"name\": \"name 3 - overridden\"\r\n        }\r\n    ],\r\n    \"array2\": [\r\n        {\r\n            \"code\": \"code11\",\r\n            \"description\": \"description 3 - overridden\"\r\n        },\r\n        {\r\n            \"code\": \"code12\",\r\n            \"description\": \"description 4 - overridden\"\r\n        },\r\n        {\r\n            \"code\": \"code13\",\r\n            \"description\": \"description 5 - overridden\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mock data overridden",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"mock_data_post_url\", pm.environment.get('function_host') + '/fnc/rpt/mockdata/' + pm.environment.get('data_id_3'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{function_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata/{{data_id_3}}",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata",
								"{{data_id_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mock data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{function_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{function_host}}/fnc/rpt/mockdata/{{data_id_2}}",
							"host": [
								"{{function_host}}"
							],
							"path": [
								"fnc",
								"rpt",
								"mockdata",
								"{{data_id_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Schema",
			"item": [
				{
					"name": "Get Schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// data source\r",
									"// pm.environment.set('schema_type', 'API_DATA_SOURCE');\r",
									"pm.environment.set('schema_type', 'ASSET_MANAGEMENT_DATA_SOURCE');\r",
									"// pm.environment.set('schema_type', 'SQL_SERVER_DATA_SOURCE');\r",
									"// pm.environment.set('schema_type', 'POSTGRE_DATA_SOURCE');\r",
									"\r",
									"// storage space\r",
									"// pm.environment.set('schema_type', 'NATIVE_STORAGE_SPACE');\r",
									"// pm.environment.set('schema_type', 'AZURE_BLOB_STORAGE_SPACE');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('type', pm.environment.get('schema_type'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/rpt/schemas/{{schema_type}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schemas",
								"{{schema_type}}"
							]
						}
					},
					"response": [
						{
							"name": "Reponse",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "x-project-id",
										"value": "{{x_project_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"API data source\",\n    \"type\": \"API_DATA_SOURCE\",\n    \"createdUtc\": \"2022-04-18T13:26:11:2270\",\n    \"details\": [\n        {\n            \"name\": \"Endpoint\",\n            \"key\": \"endpoint\",\n            \"dataType\": \"text\",\n            \"placeHolder\": \"Endpoint\",\n            \"isRequired\": true,\n            \"isReadonly\": false\n        },\n        {\n            \"name\": \"Method\",\n            \"key\": \"method\",\n            \"dataType\": \"combobox\",\n            \"placeHolder\": \"Method\",\n            \"isRequired\": true,\n            \"isReadonly\": false\n        },\n        {\n            \"name\": \"Query Parametters\",\n            \"key\": \"query\",\n            \"dataType\": \"text\",\n            \"placeHolder\": \"Query Parametters\",\n            \"isRequired\": false,\n            \"isReadonly\": false\n        },\n        {\n            \"name\": \"Headers\",\n            \"key\": \"headers\",\n            \"dataType\": \"textarea\",\n            \"placeHolder\": \"Headers\",\n            \"isRequired\": true,\n            \"isReadonly\": false\n        },\n        {\n            \"name\": \"Body\",\n            \"key\": \"body\",\n            \"dataType\": \"textarea\",\n            \"placeHolder\": \"Body\",\n            \"isRequired\": false,\n            \"isReadonly\": false\n        },\n        {\n            \"name\": \"Datasets\",\n            \"key\": \"dataSets\",\n            \"dataType\": \"table\",\n            \"placeHolder\": \"Datasets\",\n            \"isRequired\": true,\n            \"isReadonly\": false\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Output types",
			"item": [
				{
					"name": "Search output types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data.find(x => x.id === 'EXCELOPENXML').id;\r",
									"    pm.environment.set(\"output_type_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/outputtypes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"outputtypes",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Reponse",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "x-project-id",
										"value": "{{x_project_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 1097,\n    \"totalCount\": 3,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": \"WORDOPENXML\",\n            \"name\": \"Word (.docx)\",\n            \"extension\": \".docx\"\n        },\n        {\n            \"id\": \"EXCELOPENXML \",\n            \"name\": \"Excel (.xlsx)\",\n            \"extension\": \".xlsx\"\n        },\n        {\n            \"id\": \"PDF\",\n            \"name\": \"Pdf\",\n            \"extension\": \".pdf\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Data source types",
			"item": [
				{
					"name": "Search data source types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data.find(x => x.id === 'API_DATA_SOURCE').id;\r",
									"    pm.environment.set(\"api_data_source_type_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/datasourcetypes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"datasourcetypes",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Reponse",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "x-project-id",
										"value": "{{x_project_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 28,\n    \"totalCount\": 4,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": \"POSTGRE_DATA_SOURCE\",\n            \"name\": \"Postgre\"\n        },\n        {\n            \"id\": \"SQL_SERVER_DATA_SOURCE\",\n            \"name\": \"SQL Server\"\n        },\n        {\n            \"id\": \"ASSET_MANAGEMENT_DATA_SOURCE\",\n            \"name\": \"Asset Management\"\n        },\n        {\n            \"id\": \"API_DATA_SOURCE\",\n            \"name\": \"Api\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Storage",
			"item": [
				{
					"name": "Search storage types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data.find(x => x.id === 'AZURE_BLOB_STORAGE_SPACE').id;\r",
									"    pm.environment.set(\"azure_storage_type_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true,\r\n    \"filter\": \"{\\\"and\\\":[{\\\"queryKey\\\":\\\"name\\\",\\\"queryType\\\":\\\"text\\\",\\\"queryValue\\\":\\\"storage\\\",\\\"operation\\\":\\\"contains\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/storages/search/type",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"storages",
								"search",
								"type"
							]
						}
					},
					"response": [
						{
							"name": "Reponse",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "x-project-id",
										"value": "{{x_project_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 847,\n    \"totalCount\": 2,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"name\": \"Azure Blob Storage\",\n            \"canRead\": true\n        },\n        {\n            \"id\": \"NATIVE_STORAGE_SPACE\",\n            \"name\": \"Local Storage\",\n            \"canRead\": false\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Search storages",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const native_storage_id = jsonData.data.find(x => x.typeId === 'NATIVE_STORAGE_SPACE').id;\r",
									"    // const azure_storage_id = jsonData.data.find(x => x.typeId === 'AZURE_BLOB_STORAGE_SPACE').id;\r",
									"    pm.environment.set(\"native_storage_id\", native_storage_id);\r",
									"    // pm.environment.set(\"azure_storage_id\", azure_storage_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/storages/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"storages",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Reponse",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "x-project-id",
										"value": "{{x_project_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 25,\n    \"totalCount\": 4,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 4,\n            \"name\": \"storage_name_updated\",\n            \"typeId\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"content\": \"{\\\"connectionString\\\":\\\"DefaultEndpointsProtocol=https;AccountName=ydxdev01sea01sa;AccountKey=OMPxMBmQKY5fJNVRFcof6SJLrAea20lDsnpSEkUtCvsFqyMsLAFtt8jmU2nRJhIcv7kJScEwiiwziuW/FSxayg==;EndpointSuffix=core.windows.net\\\",\\\"containerName\\\":\\\"file\\\"}\",\n            \"canEdit\": true,\n            \"canDelete\": true,\n            \"createdUtc\": \"2022-04-07T06:29:54:1581\",\n            \"updatedUtc\": \"2022-04-07T06:31:31:4387\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"storage_name_updated\",\n            \"typeId\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"content\": \"{\\\"connectionString\\\":\\\"DefaultEndpointsProtocol=https;AccountName=ydxdev01sea01sa;AccountKey=OMPxMBmQKY5fJNVRFcof6SJLrAea20lDsnpSEkUtCvsFqyMsLAFtt8jmU2nRJhIcv7kJScEwiiwziuW/FSxayg==;EndpointSuffix=core.windows.net\\\",\\\"containerName\\\":\\\"file\\\"}\",\n            \"canEdit\": true,\n            \"canDelete\": true,\n            \"createdUtc\": \"2022-04-07T06:25:07:6689\",\n            \"updatedUtc\": \"2022-04-07T06:27:27:1113\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"azure_blob_storage\",\n            \"typeId\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"content\": \"{\\\"connectionString\\\":\\\"DefaultEndpointsProtocol=https;AccountName=ydxdev01sea01sa;AccountKey=OMPxMBmQKY5fJNVRFcof6SJLrAea20lDsnpSEkUtCvsFqyMsLAFtt8jmU2nRJhIcv7kJScEwiiwziuW/FSxayg==;EndpointSuffix=core.windows.net\\\",\\\"containerName\\\":\\\"file\\\"}\",\n            \"canEdit\": true,\n            \"canDelete\": true,\n            \"createdUtc\": \"2022-04-07T06:25:04:1868\",\n            \"updatedUtc\": \"2022-04-07T06:25:04:1868\"\n        },\n        {\n            \"id\": 1,\n            \"name\": \"AHS Storage\",\n            \"typeId\": \"NATIVE_STORAGE_SPACE\",\n            \"canEdit\": false,\n            \"canDelete\": false,\n            \"createdUtc\": \"2022-04-07T06:23:32:3133\",\n            \"updatedUtc\": \"2022-04-07T06:23:32:3133\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Report - Template",
			"item": [
				{
					"name": "Upload api report template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    console.log(jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
									"    pm.expect(jsonData).to.have.property('filePath');\r",
									"    pm.environment.set(\"report_template_file_url\", jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set(\"date_utc\", moment().utc().format(\"yyyyMMDDHHmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "tests/IntegrationTest/AppData/api_report_template.rdlc"
								}
							]
						},
						"url": {
							"raw": "{{storage_host}}/sta/files/report_template/{{date_utc}}",
							"host": [
								"{{storage_host}}"
							],
							"path": [
								"sta",
								"files",
								"report_template",
								"{{date_utc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload series report template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('filePath');\r",
									"    pm.environment.set(\"report_template_series_file_url\", jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "tests/IntegrationTest/AppData/asset_timeseries_report_template.rdlc"
								}
							]
						},
						"url": {
							"raw": "{{storage_host}}/sta/files/report_template/{{date_utc}}",
							"host": [
								"{{storage_host}}"
							],
							"path": [
								"sta",
								"files",
								"report_template",
								"{{date_utc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get datasets from template file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateFileUrl\": \"{{report_template_series_file_url}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/datasets",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"datasets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Build report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"DateTimeFormat\": \"dd/MM/yyyy HH:mm:ss\",\r\n    \"FromDate\": \"2022-01-01 12:12:12\",\r\n    \"ToDate\": \"2022-01-31 12:12:12\",\r\n    \"Template\": {\r\n        \"Id\": 1,\r\n        \"Name\": \"report template name 5f87b2a2-e58a-4202-ba83-48fe98e38053\",\r\n        \"TemplateFileUrl\": \"{{report_template_file_url}}\",\r\n        \"Default\": {\r\n            \"ReportName\": \"report template name 5f87b2a2-e58a-4202-ba83-48fe98e38053\"\r\n        },\r\n        \"DataSetCount\": 1,\r\n        \"StorageId\": 1,\r\n        \"OutputTypeId\": \"EXCELOPENXML\",\r\n        \"CreatedUtc\": \"2022-07-08T07:06:23.3288782\",\r\n        \"UpdatedUtc\": \"2022-07-08T07:06:23.3289207\",\r\n        \"OutputType\": {\r\n            \"Id\": \"EXCELOPENXML\",\r\n            \"Name\": \"Excel (.xlsx)\",\r\n            \"Extension\": \".xlsx\"\r\n        },\r\n        \"Storage\": {\r\n            \"Id\": 1,\r\n            \"Name\": \"AHS Storage\",\r\n            \"TypeId\": \"NATIVE_STORAGE_SPACE\",\r\n            \"Content\": null,\r\n            \"CanEdit\": false,\r\n            \"CanDelete\": false,\r\n            \"CreatedUtc\": \"2022-07-08T07:02:18.9533333\",\r\n            \"UpdatedUtc\": \"2022-07-08T07:02:18.9533333\",\r\n            \"Type\": null\r\n        }\r\n    },\r\n    \"Data\": [\r\n        {\r\n            \"Name\": \"DataSet1\",\r\n            \"Table\": [\r\n                {\r\n                    \"id\": \"1\",\r\n                    \"name\": \"record 1\"\r\n                },\r\n                {\r\n                    \"id\": \"2\",\r\n                    \"name\": \"record 2\"\r\n                },\r\n                {\r\n                    \"id\": \"3\",\r\n                    \"name\": \"record 3\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_webapp}}/rpt/workers/build",
							"host": [
								"{{host_webapp}}"
							],
							"path": [
								"rpt",
								"workers",
								"build"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create template (API source single & Native storage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.environment.set(\"report_template_id_1\", jsonData.id);\r",
									"    pm.environment.set(\"report_template_name_1\", jsonData.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PDF => .pdf\r",
									"// WORD => .doc\r",
									"// EXCEL => .xls\r",
									"// WORDOPENXML => .docx\r",
									"// EXCELOPENXML => .xlsx\r",
									"// HTML5 => .html"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"API_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"endpoint\": \"{{local_function_host}}/fnc/rpt/mockdata/{{data_id_1}}\",\r\n            \"method\": \"GET\",\r\n            \"query\": \"start=@fromDate&end=@toDate\",\r\n            \"headers\": {\r\n                \"x-api-key\": \"{{function_key}}\"\r\n            },\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create template for generate schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.environment.set(\"report_template_schedule\", jsonData.id);\r",
									"    pm.environment.set(\"report_template_schedule_name\", jsonData.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PDF => .pdf\r",
									"// WORD => .doc\r",
									"// EXCEL => .xls\r",
									"// WORDOPENXML => .docx\r",
									"// EXCELOPENXML => .xlsx\r",
									"// HTML5 => .html"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"API_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"endpoint\": \"{{local_function_host}}/fnc/rpt/mockdata/{{data_id_1}}\",\r\n            \"method\": \"GET\",\r\n            \"query\": \"start=@fromDate&end=@toDate\",\r\n            \"headers\": {\r\n                \"x-api-key\": \"{{function_key}}\"\r\n            },\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search cron expressions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const cron_expression_id = jsonData.data.find(x => x.code === '10_hours').id;\r",
									"    pm.environment.set(\"cron_expression_id_1\", cron_expression_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current = new Date();\r",
									"const from_date = new Date(new Date().setDate(current.getDate() - 10));\r",
									"const to_date = new Date(new Date().setDate(current.getDate() + 10));\r",
									"\r",
									"pm.environment.set('start', from_date);\r",
									"pm.environment.set('end', to_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheduler_host}}/sch/cronexpressions/search",
							"host": [
								"{{scheduler_host}}"
							],
							"path": [
								"sch",
								"cronexpressions",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 463,\n    \"totalCount\": 23,\n    \"totalPage\": 2,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": \"d420433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_second\",\n            \"name\": \"Every second\",\n            \"cron\": \"*/1 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2633\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2633\"\n        },\n        {\n            \"id\": \"da20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_seconds\",\n            \"name\": \"Every 2 seconds\",\n            \"cron\": \"*/2 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2700\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2700\"\n        },\n        {\n            \"id\": \"e020433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_seconds\",\n            \"name\": \"Every 5 seconds\",\n            \"cron\": \"*/5 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2733\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2733\"\n        },\n        {\n            \"id\": \"e620433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_seconds\",\n            \"name\": \"Every 10 seconds\",\n            \"cron\": \"*/10 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2766\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2766\"\n        },\n        {\n            \"id\": \"ec20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_seconds\",\n            \"name\": \"Every 15 seconds\",\n            \"cron\": \"*/15 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2800\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2800\"\n        },\n        {\n            \"id\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"30_seconds\",\n            \"name\": \"Every 30 seconds\",\n            \"cron\": \"*/30 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2833\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2833\"\n        },\n        {\n            \"id\": \"f820433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_minute\",\n            \"name\": \"Every minute\",\n            \"cron\": \"0 */1 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2866\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2866\"\n        },\n        {\n            \"id\": \"fe20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_minutes\",\n            \"name\": \"Every 2 minutes\",\n            \"cron\": \"0 */2 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2900\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2900\"\n        },\n        {\n            \"id\": \"0421433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_minutes\",\n            \"name\": \"Every 5 minutes\",\n            \"cron\": \"0 */5 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"0a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_minutes\",\n            \"name\": \"Every 10 minutes\",\n            \"cron\": \"0 */10 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"1021433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_minutes\",\n            \"name\": \"Every 15 minutes\",\n            \"cron\": \"0 */15 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"1621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"30_minutes\",\n            \"name\": \"Every 30 minutes\",\n            \"cron\": \"0 */30 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2966\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2966\"\n        },\n        {\n            \"id\": \"1c21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_hour\",\n            \"name\": \"Every hour\",\n            \"cron\": \"0 0 */1 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2966\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2966\"\n        },\n        {\n            \"id\": \"2221433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_hours\",\n            \"name\": \"Every 2 hours\",\n            \"cron\": \"0 0 */2 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3000\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3000\"\n        },\n        {\n            \"id\": \"2621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_hours\",\n            \"name\": \"Every 5 hours\",\n            \"cron\": \"0 0 */5 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3033\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3033\"\n        },\n        {\n            \"id\": \"2a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_hours\",\n            \"name\": \"Every 10 hours\",\n            \"cron\": \"0 0 */10 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3033\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3033\"\n        },\n        {\n            \"id\": \"2e21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_hours\",\n            \"name\": \"Every 15 hours\",\n            \"cron\": \"0 0 */15 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3066\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3066\"\n        },\n        {\n            \"id\": \"3221433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_day\",\n            \"name\": \"At 12:00 AM\",\n            \"cron\": \"0 0 0 */1 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3100\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3100\"\n        },\n        {\n            \"id\": \"3621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_days\",\n            \"name\": \"At 12:00 AM, every 2 days\",\n            \"cron\": \"0 0 0 */2 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3133\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3133\"\n        },\n        {\n            \"id\": \"3a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_days\",\n            \"name\": \"At 12:00 AM, every 5 days\",\n            \"cron\": \"0 0 0 */5 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3166\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3166\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Search schedule types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data.find(x => x.id === 'REPORT_AND_SEND').id;\r",
									"    pm.environment.set(\"schedule_type_id_1\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/scheduletypes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"scheduletypes",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    const jobId = jsonData.jobId;\r",
									"    pm.environment.set(\"schedule_id_1\", id);\r",
									"    pm.environment.set(\"job_id_for_report\", jobId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"scheduler name_{{report_template_id_1}}_test\",\r\n    \"type\": \"{{schedule_type_id_1}}\",\r\n    \"templates\": [\r\n        {{report_template_id_1}},\r\n        {{report_template_schedule}}\r\n    ],\r\n    \"cronExpressionId\": \"{{cron_expression_id_1}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"0 0 */10 * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\",\r\n    \"contacts\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Every 30 seconds\",\n    \"templateId\": 1,\n    \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n    \"isSwitchedToCron\": true,\n    \"cron\": \"*/30 * * * * ?\",\n    \"timeZoneName\": \"Singapore Standard Time\",\n    \"endpoint\": \"rpt/reports/generate\",\n    \"start\": \"2022-07-31T23:58:44:0180\",\n    \"end\": \"2022-08-20T23:58:44:0180\",\n    \"jobId\": \"132a6e78-9e16-4efe-97be-867694858d8b\"\n}"
						}
					]
				},
				{
					"name": "Preview report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current = new Date();\r",
									"const from_date = new Date(new Date().setDate(current.getDate() - 2));\r",
									"const to_date = new Date(new Date().setDate(current.getDate() - 1));\r",
									"\r",
									"pm.environment.set('from_date', from_date);\r",
									"pm.environment.set('to_date', to_date);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Preview report success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Preview report has response\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property('activityId');",
									"    pm.expect(jsonData).to.have.property('previewKey');",
									"    pm.expect(jsonData).to.have.property('endpoint');",
									"",
									"    pm.environment.set(\"previewKey\", jsonData.previewKey);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"activityId\": \"{{$guid}}\",\r\n    \"templateId\": \"{{report_template_id_1}}\",\r\n    \"fromDate\": \"{{from_date}}\", // yyyy-MM-dd HH:mm:ss\r\n    \"toDate\": \"{{to_date}}\" // yyyy-MM-dd HH:mm:ss\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/preview",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"preview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get preview report url",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Wait for the job to run\r",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Preview report success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Preview report has response\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    console.log(jsonData);",
									"",
									"    // pm.expect(jsonData).to.have.property('fileUrl');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"previewKey\": \"{{previewKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_webapp}}/rpt/workers/preview/url",
							"host": [
								"{{host_webapp}}"
							],
							"path": [
								"rpt",
								"workers",
								"preview",
								"url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download preview reports",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     //\"OutputTypeId\":\"EXCELOPENXML\",\r\n    \"templateId\": \"{{report_template_id_1}}\",\r\n    \"fromDate\": \"{{from_date}}\", // yyyy-MM-dd HH:mm:ss\r\n    \"toDate\": \"{{to_date}}\" // yyyy-MM-dd HH:mm:ss\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/preview/export",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"preview",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templates\": [{{report_template_id_1}}, {{report_template_schedule}}],\r\n    \"dateTimeFormat\": \"yyyy-MM-dd HH:mm:ss\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/generate?job_id={{job_id_for_report}}&time_zone_name=Singapore+Standard+Time&execution_time=1660179095293&next_execution_time=1660179120000",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"generate"
							],
							"query": [
								{
									"key": "job_id",
									"value": "{{job_id_for_report}}"
								},
								{
									"key": "time_zone_name",
									"value": "Singapore+Standard+Time"
								},
								{
									"key": "execution_time",
									"value": "1660179095293"
								},
								{
									"key": "next_execution_time",
									"value": "1660179120000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload asset snapshot report template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('filePath');\r",
									"    pm.environment.set(\"report_template_file_url\", jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set(\"date_utc\", moment().utc().format(\"yyyyMMDDHHmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "tests/IntegrationTest/AppData/asset_snapshot_report_template.rdlc"
								}
							]
						},
						"url": {
							"raw": "{{storage_host}}/sta/files/report_template/{{date_utc}}",
							"host": [
								"{{storage_host}}"
							],
							"path": [
								"sta",
								"files",
								"report_template",
								"{{date_utc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create template (Asset snapshot & Native storage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Request success\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"// pm.test(\"Request has response\", function () {\r",
									"//     const jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData).to.have.property('id');\r",
									"//     const id = jsonData.id;\r",
									"//     pm.environment.set(\"report_template_id_3\", id);\r",
									"// });\r",
									"\r",
									"pm.environment.set(\"report_template_id_3\", pm.environment.get('report_template_id_1'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PDF => .pdf\r",
									"// WORD => .doc\r",
									"// EXCEL => .xls\r",
									"// WORDOPENXML => .docx\r",
									"// EXCELOPENXML => .xlsx\r",
									"// HTML5 => .html"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"ASSET_MANAGEMENT_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"tenantId\": \"0779433e-f36b-1410-8650-00f91313348c\",\r\n            \"subscriptionId\": \"0e79433e-f36b-1410-8650-00f91313348c\",\r\n            \"projectId\": \"3e79433e-f36b-1410-8650-00f91313348c\",\r\n            \"assetId\": \"2e8183fe-2ac2-4723-9987-2af6801df592\", // assetId user selected on the tree\r\n            \"attributes\":[\r\n                    {\r\n                        \"id\": \"2e6183a5-c13d-47ab-b3c8-3bec76419abd\",\r\n                        \"timeInterval\": \"1 minute\",\r\n                        \"aggregationType\": \"sum\"\r\n                    },\r\n                    {\r\n                        \"id\": \"a4810c41-9537-4458-91d5-f02707b99bf1\",\r\n                        \"timeInterval\": \"2 minute\",\r\n                        \"aggregationType\": \"sum\"\r\n                    }\r\n            ],\r\n            \"dataType\": \"snapshot\", // data type user selected on the dropdown\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current = new Date();\r",
									"const from_date = new Date(new Date().setDate(current.getDate() - 1));\r",
									"const to_date = new Date(new Date().setDate(current.getDate() + 10));\r",
									"\r",
									"pm.environment.set('from_date', from_date);\r",
									"pm.environment.set('to_date', to_date);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// temporary comment cause mock api no longer working\r",
									"// pm.test(\"Request success\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"// pm.test(\"Request has response\", function () {\r",
									"//     const jsonData = pm.response.json();\r",
									"//     console.log(jsonData);\r",
									"//     pm.expect(jsonData).to.have.property('id');\r",
									"//     pm.expect(jsonData).to.have.property('templateId', pm.environment.get('report_template_id_3'));\r",
									"//     pm.expect(jsonData).to.have.property('storageUrl').not.eq(undefined);\r",
									"//     const id = jsonData.id;\r",
									"//     pm.environment.set(\"report_id\", id);\r",
									"// });\r",
									"\r",
									"// pm.environment.set(\"report_id\", pm.environment.get('report_template_id_1'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templates\": [{{report_template_id_3}}],\r\n    \"dateTimeFormat\": \"yyyy-MM-dd HH:mm:ss\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/generate?job_id={{job_id_for_report}}&time_zone_name=Singapore+Standard+Time&execution_time=1660179095293&next_execution_time=1660179120000",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"generate"
							],
							"query": [
								{
									"key": "job_id",
									"value": "{{job_id_for_report}}"
								},
								{
									"key": "time_zone_name",
									"value": "Singapore+Standard+Time"
								},
								{
									"key": "execution_time",
									"value": "1660179095293"
								},
								{
									"key": "next_execution_time",
									"value": "1660179120000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload asset timeseries report template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('filePath');\r",
									"    pm.environment.set(\"report_template_file_url\", jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set(\"date_utc\", moment().utc().format(\"yyyyMMDDHHmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "tests/IntegrationTest/AppData/asset_timeseries_report_template.rdlc"
								}
							]
						},
						"url": {
							"raw": "{{storage_host}}/sta/files/report_template/{{date_utc}}",
							"host": [
								"{{storage_host}}"
							],
							"path": [
								"sta",
								"files",
								"report_template",
								"{{date_utc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create template (Asset timeseries & Native storage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Request success\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"// pm.test(\"Request has response\", function () {\r",
									"//     const jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData).to.have.property('id');\r",
									"//     const id = jsonData.id;\r",
									"//     pm.environment.set(\"report_template_id_4\", id);\r",
									"// });\r",
									"\r",
									"pm.environment.set(\"report_template_id_4\", pm.environment.get('report_template_id_1'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PDF => .pdf\r",
									"// WORD => .doc\r",
									"// EXCEL => .xls\r",
									"// WORDOPENXML => .docx\r",
									"// EXCELOPENXML => .xlsx\r",
									"// HTML5 => .html"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"ASSET_MANAGEMENT_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"tenantId\": \"0779433e-f36b-1410-8650-00f91313348c\",\r\n            \"subscriptionId\": \"0e79433e-f36b-1410-8650-00f91313348c\",\r\n            \"projectId\": \"3e79433e-f36b-1410-8650-00f91313348c\",\r\n            \"assetId\": \"2e8183fe-2ac2-4723-9987-2af6801df592\", // assetId user selected on the tree\r\n            \"attributes\":[\r\n                    {\r\n                        \"id\": \"2e6183a5-c13d-47ab-b3c8-3bec76419abd\",\r\n                        \"timeInterval\": \"1 minute\",\r\n                        \"aggregationType\": \"sum\"\r\n                    },\r\n                    {\r\n                        \"id\": \"a4810c41-9537-4458-91d5-f02707b99bf1\",\r\n                        \"timeInterval\": \"2 minute\",\r\n                        \"aggregationType\": \"sum\"\r\n                    }\r\n            ],\r\n            \"dataType\": \"timeseries\", // data type user selected on the dropdown\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current = new Date();\r",
									"const from_date = new Date(new Date().setDate(current.getDate() - 1));\r",
									"const to_date = new Date(new Date().setDate(current.getDate() + 10));\r",
									"\r",
									"pm.environment.set('from_date', from_date);\r",
									"pm.environment.set('to_date', to_date);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// temporary comment cause mock api no longer working\r",
									"// pm.test(\"Request success\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"// pm.test(\"Request has response\", function () {\r",
									"//     const jsonData = pm.response.json();\r",
									"//     console.log(jsonData);\r",
									"//     pm.expect(jsonData).to.have.property('id');\r",
									"//     pm.expect(jsonData).to.have.property('templateId', pm.environment.get('report_template_id_4'));\r",
									"//     pm.expect(jsonData).to.have.property('storageUrl').not.eq(undefined);\r",
									"//     const id = jsonData.id;\r",
									"//     pm.environment.set(\"report_id\", id);\r",
									"// });\r",
									"\r",
									"// pm.environment.set(\"report_id\", pm.environment.get('report_template_id_1'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templates\": [{{report_template_id_4}}],\r\n    \"dateTimeFormat\": \"yyyy-MM-dd HH:mm:ss\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/generate?job_id={{job_id_for_report}}&time_zone_name=Singapore+Standard+Time&execution_time=1660179095293&next_execution_time=1660179120000",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"generate"
							],
							"query": [
								{
									"key": "job_id",
									"value": "{{job_id_for_report}}"
								},
								{
									"key": "time_zone_name",
									"value": "Singapore+Standard+Time"
								},
								{
									"key": "execution_time",
									"value": "1660179095293"
								},
								{
									"key": "next_execution_time",
									"value": "1660179120000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial update template (API source single & Azure blobl storage)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var guid = uuid.v4();\r",
									"pm.environment.set('report_template_name_patch', 'report template name updated ' + guid);\r",
									"pm.environment.set('report_storage_id_patch', pm.environment.get('native_storage_id'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name', pm.environment.get('report_template_name_patch'));\r",
									"    pm.expect(jsonData).to.have.property('storageId', pm.environment.get('report_storage_id_patch'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/name\",\r\n        \"value\": \"{{report_template_name_patch}}\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/templateFileUrl\",\r\n        \"value\": \"{{report_template_file_url}}\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/outputTypeId\",\r\n        \"value\": \"{{output_type_id}}\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/storageId\",\r\n        \"value\": \"{{report_storage_id_patch}}\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/dataSets\",\r\n        \"value\": [\r\n            {\r\n                \"name\": \"dataset1\",\r\n                \"dataSourceTypeId\": \"API_DATA_SOURCE\",\r\n                \"dataSourceContent\": {\r\n                    \"endpoint\": \"{{local_function_host}}/fnc/rpt/mockdata/{{data_id_1}}\",\r\n                    \"method\": \"GET\",\r\n                    \"query\": \"start=@fromDate&end=@toDate\",\r\n                    \"headers\": {\r\n                        \"x-api-key\": \"{{function_key}}\"\r\n                    },\r\n                    \"datasetMappings\": [\r\n                        {\r\n                            \"propName\": \"default\",\r\n                            \"dataSetName\": \"DataSet1\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/{{report_template_id_1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"{{report_template_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current = new Date();\r",
									"const from_date = new Date(new Date().setDate(current.getDate() - 1));\r",
									"const to_date = new Date(new Date().setDate(current.getDate() + 10));\r",
									"\r",
									"pm.environment.set('from_date', from_date);\r",
									"pm.environment.set('to_date', to_date);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Request has response\", function () {\r",
									"//     const jsonData = pm.response.json();\r",
									"//     console.log(jsonData);\r",
									"//     pm.expect(jsonData).to.have.property('id');\r",
									"//     pm.expect(jsonData).to.have.property('templateId', pm.environment.get('report_template_id_1'));\r",
									"//     pm.expect(jsonData).to.have.property('storageUrl').not.eq(undefined);\r",
									"//     const id = jsonData.id;\r",
									"//     pm.environment.set(\"report_id\", id);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templates\": [{{report_template_id_1}}],\r\n    \"dateTimeFormat\": \"yyyy-MM-dd HH:mm:ss\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/generate?job_id={{job_id_for_report}}&time_zone_name=Singapore+Standard+Time&execution_time=1660179095293&next_execution_time=1660179120000",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"generate"
							],
							"query": [
								{
									"key": "job_id",
									"value": "{{job_id_for_report}}"
								},
								{
									"key": "time_zone_name",
									"value": "Singapore+Standard+Time"
								},
								{
									"key": "execution_time",
									"value": "1660179095293"
								},
								{
									"key": "next_execution_time",
									"value": "1660179120000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search templates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data[0].id;\r",
									"    pm.environment.set(\"report_template_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 34,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateFileUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/report_templates/20220727022508/api_report_template.rdlc\",\n            \"default\": \"{\\\"ReportName\\\":\\\"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\\\"}\",\n            \"dataSetCount\": 1,\n            \"storageId\": 1,\n            \"outputTypeId\": \"EXCELOPENXML\",\n            \"createdUtc\": \"2022-07-27T02:25:41:6927\",\n            \"updatedUtc\": \"2022-07-27T02:25:41:6928\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id', pm.environment.get('report_template_id'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/rpt/templates/{{report_template_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"{{report_template_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search reports",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data[0].id;\r",
									"\tpm.environment.set(\"report_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 896,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateId\": 1,\n            \"templateName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"storageUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/reports/20220727/report%20template%20name%204ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"fileName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"overridden\": \"{\\\"tenantId\\\":\\\"guid\\\",\\\"subscriptionId\\\":\\\"guid\\\",\\\"projectId\\\":\\\"guid\\\",\\\"fromDate\\\":\\\"2022-07-26T02:25:46.444Z\\\",\\\"toDate\\\":\\\"2022-08-06T02:25:46.444Z\\\"}\",\n            \"createdUtc\": \"2022-07-27T02:26:23:0389\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id', pm.environment.get('report_id'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/rpt/reports/{{report_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search report templates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data[0].templateId;\r",
									"    pm.environment.set(\"report_list_templates_id\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/templates/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"templates",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 896,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateId\": 1,\n            \"templateName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"storageUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/reports/20220727/report%20template%20name%204ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"fileName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"overridden\": \"{\\\"tenantId\\\":\\\"guid\\\",\\\"subscriptionId\\\":\\\"guid\\\",\\\"projectId\\\":\\\"guid\\\",\\\"fromDate\\\":\\\"2022-07-26T02:25:46.444Z\\\",\\\"toDate\\\":\\\"2022-08-06T02:25:46.444Z\\\"}\",\n            \"createdUtc\": \"2022-07-27T02:26:23:0389\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Reports By Template ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true,\r\n    \"filter\": \"{\\\"and\\\":[{\\\"queryKey\\\":\\\"template.id\\\",\\\"fieldTitle\\\":\\\"Template\\\",\\\"queryType\\\":\\\"number\\\",\\\"dateFormat\\\":\\\"\\\",\\\"showTime\\\":false,\\\"operationText\\\":\\\"COMMON.FILTER.SELECT_OPERATOR.EQUALS\\\",\\\"operation\\\":\\\"eq\\\",\\\"queryValue\\\":{{report_list_templates_id}}}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 896,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateId\": 1,\n            \"templateName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"storageUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/reports/20220727/report%20template%20name%204ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"fileName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"overridden\": \"{\\\"tenantId\\\":\\\"guid\\\",\\\"subscriptionId\\\":\\\"guid\\\",\\\"projectId\\\":\\\"guid\\\",\\\"fromDate\\\":\\\"2022-07-26T02:25:46.444Z\\\",\\\"toDate\\\":\\\"2022-08-06T02:25:46.444Z\\\"}\",\n            \"createdUtc\": \"2022-07-27T02:26:23:0389\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get report download url",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/rpt/reports/{{report_id}}/download/url",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"{{report_id}}",
								"download",
								"url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download reports",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objectType\": \"report\",\r\n    \"ids\": [{{report_id}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/export",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download reports by template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objectType\": \"template\",\r\n    \"templateIds\": [{{report_list_templates_id}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/templates/export",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"templates",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete schedule success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{{schedule_id_1}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Schedule",
			"item": [
				{
					"name": "Search cron expressions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const cron_expression_id = jsonData.data.find(x => x.code === '30_seconds').id;\r",
									"    pm.environment.set(\"cron_expression_id\", cron_expression_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current = new Date();\r",
									"const from_date = new Date(new Date().setDate(current.getDate() - 10));\r",
									"const to_date = new Date(new Date().setDate(current.getDate() + 10));\r",
									"\r",
									"pm.environment.set('start', from_date);\r",
									"pm.environment.set('end', to_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheduler_host}}/sch/cronexpressions/search",
							"host": [
								"{{scheduler_host}}"
							],
							"path": [
								"sch",
								"cronexpressions",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 463,\n    \"totalCount\": 23,\n    \"totalPage\": 2,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": \"d420433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_second\",\n            \"name\": \"Every second\",\n            \"cron\": \"*/1 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2633\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2633\"\n        },\n        {\n            \"id\": \"da20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_seconds\",\n            \"name\": \"Every 2 seconds\",\n            \"cron\": \"*/2 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2700\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2700\"\n        },\n        {\n            \"id\": \"e020433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_seconds\",\n            \"name\": \"Every 5 seconds\",\n            \"cron\": \"*/5 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2733\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2733\"\n        },\n        {\n            \"id\": \"e620433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_seconds\",\n            \"name\": \"Every 10 seconds\",\n            \"cron\": \"*/10 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2766\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2766\"\n        },\n        {\n            \"id\": \"ec20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_seconds\",\n            \"name\": \"Every 15 seconds\",\n            \"cron\": \"*/15 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2800\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2800\"\n        },\n        {\n            \"id\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"30_seconds\",\n            \"name\": \"Every 30 seconds\",\n            \"cron\": \"*/30 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2833\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2833\"\n        },\n        {\n            \"id\": \"f820433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_minute\",\n            \"name\": \"Every minute\",\n            \"cron\": \"0 */1 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2866\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2866\"\n        },\n        {\n            \"id\": \"fe20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_minutes\",\n            \"name\": \"Every 2 minutes\",\n            \"cron\": \"0 */2 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2900\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2900\"\n        },\n        {\n            \"id\": \"0421433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_minutes\",\n            \"name\": \"Every 5 minutes\",\n            \"cron\": \"0 */5 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"0a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_minutes\",\n            \"name\": \"Every 10 minutes\",\n            \"cron\": \"0 */10 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"1021433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_minutes\",\n            \"name\": \"Every 15 minutes\",\n            \"cron\": \"0 */15 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"1621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"30_minutes\",\n            \"name\": \"Every 30 minutes\",\n            \"cron\": \"0 */30 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2966\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2966\"\n        },\n        {\n            \"id\": \"1c21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_hour\",\n            \"name\": \"Every hour\",\n            \"cron\": \"0 0 */1 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2966\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2966\"\n        },\n        {\n            \"id\": \"2221433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_hours\",\n            \"name\": \"Every 2 hours\",\n            \"cron\": \"0 0 */2 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3000\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3000\"\n        },\n        {\n            \"id\": \"2621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_hours\",\n            \"name\": \"Every 5 hours\",\n            \"cron\": \"0 0 */5 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3033\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3033\"\n        },\n        {\n            \"id\": \"2a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_hours\",\n            \"name\": \"Every 10 hours\",\n            \"cron\": \"0 0 */10 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3033\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3033\"\n        },\n        {\n            \"id\": \"2e21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_hours\",\n            \"name\": \"Every 15 hours\",\n            \"cron\": \"0 0 */15 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3066\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3066\"\n        },\n        {\n            \"id\": \"3221433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_day\",\n            \"name\": \"At 12:00 AM\",\n            \"cron\": \"0 0 0 */1 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3100\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3100\"\n        },\n        {\n            \"id\": \"3621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_days\",\n            \"name\": \"At 12:00 AM, every 2 days\",\n            \"cron\": \"0 0 0 */2 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3133\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3133\"\n        },\n        {\n            \"id\": \"3a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_days\",\n            \"name\": \"At 12:00 AM, every 5 days\",\n            \"cron\": \"0 0 0 */5 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3166\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3166\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Search schedule types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    const id = jsonData.data.find(x => x.id === 'REPORT_AND_SEND').id;\r",
									"    pm.environment.set(\"schedule_type_report_id\", id);\r",
									"    const id2 = jsonData.data.find(x => x.id === 'SEND').id;\r",
									"    pm.environment.set(\"schedule_type_send_id\", id2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/scheduletypes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"scheduletypes",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - REPORT AND SEND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    const jobId = jsonData.jobId;\r",
									"    pm.environment.set(\"schedule_id\", id);\r",
									"    pm.environment.set(\"job_id_1\", jobId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"scheduler name_{{report_template_id_1}}\",\r\n    \"type\": \"{{schedule_type_report_id}}\",\r\n    \"templates\": [\r\n        {{report_template_id_1}}\r\n    ],\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\",\r\n    \"contacts\": [\r\n        {\r\n            \"objectId\": \"{{contact_id}}\",\r\n            \"objectType\": \"{{schedule_contact_type}}\"\r\n        },\r\n        {\r\n            \"objectId\": \"{{contact_group_id}}\",\r\n            \"objectType\": \"{{schedule_contact_group_type}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Every 30 seconds\",\n    \"templateId\": 1,\n    \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n    \"isSwitchedToCron\": true,\n    \"cron\": \"*/30 * * * * ?\",\n    \"timeZoneName\": \"Singapore Standard Time\",\n    \"endpoint\": \"rpt/reports/generate\",\n    \"start\": \"2022-07-31T23:58:44:0180\",\n    \"end\": \"2022-08-20T23:58:44:0180\",\n    \"jobId\": \"132a6e78-9e16-4efe-97be-867694858d8b\"\n}"
						}
					]
				},
				{
					"name": "Create recurring job - FAILED - jobs null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"period\": \"*-1m\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - FAILED - jobs empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name_{{report_template_id_1}}\",\r\n    \"jobs\": [], \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"period\": \"*-1m\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - FAILED - period null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name_{{report_template_id_1}}\",\r\n    \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - FAILED - period empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name_{{report_template_id_1}}\",\r\n    \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"period\": \"\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - FAILED - period invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name_{{report_template_id_1}}\",\r\n    \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"period\": \"313sacsa\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - SEND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    const jobId = jsonData.jobId;\r",
									"    pm.environment.set(\"schedule_send_id\", id);\r",
									"    pm.environment.set(\"job_send_id_1\", jobId);\r",
									"    pm.expect(jsonData.type).to.equal('SEND');\r",
									"    pm.expect(jsonData.period).to.equal('*-1m');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"period\": \"*-1m\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search schedules",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"    \r",
									"    const jobId = jsonData.data[0].jobId;\r",
									"    pm.environment.set(\"job_id\", jobId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 37,\n    \"totalCount\": 4,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Every 30 seconds\",\n            \"templateId\": 1,\n            \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"isSwitchedToCron\": true,\n            \"cron\": \"*/30 * * * * ?\",\n            \"timeZoneName\": \"Singapore Standard Time\",\n            \"endpoint\": \"rpt/reports/generate\",\n            \"start\": \"2022-07-31T23:58:44:0180\",\n            \"end\": \"2022-08-20T23:58:44:0180\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Every 30 seconds\",\n            \"templateId\": 1,\n            \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"isSwitchedToCron\": true,\n            \"cron\": \"*/30 * * * * ?\",\n            \"timeZoneName\": \"Singapore Standard Time\",\n            \"endpoint\": \"rpt/reports/generate\",\n            \"start\": \"2022-07-31T23:58:44:0180\",\n            \"end\": \"2022-08-20T23:58:44:0180\",\n            \"jobId\": \"97b60f91-3761-41ec-a032-64db72dfb97e\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Every 50 seconds\",\n            \"templateId\": 1,\n            \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"isSwitchedToCron\": true,\n            \"cron\": \"*/50 * * * * ?\",\n            \"timeZoneName\": \"Singapore Standard Time\",\n            \"endpoint\": \"rpt/reports/generate\",\n            \"start\": \"2022-07-31T23:58:44:0180\",\n            \"end\": \"2022-08-20T23:58:44:0180\",\n            \"jobId\": \"132a6e78-9e16-4efe-97be-867694858d8b\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Every 50 seconds\",\n            \"templateId\": 1,\n            \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"isSwitchedToCron\": true,\n            \"cron\": \"*/50 * * * * ?\",\n            \"timeZoneName\": \"Singapore Standard Time\",\n            \"endpoint\": \"rpt/reports/generate\",\n            \"start\": \"2022-07-31T23:58:44:0180\",\n            \"end\": \"2022-08-20T23:58:44:0180\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Generate report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templates\": [{{report_template_schedule}}],\r\n    \"dateTimeFormat\": \"yyyy-MM-dd HH:mm:ss\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/generate?job_id={{job_id_1}}&time_zone_name=Singapore+Standard+Time&execution_time=1660179095293&next_execution_time=1660179120000",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"generate"
							],
							"query": [
								{
									"key": "job_id",
									"value": "{{job_id_1}}"
								},
								{
									"key": "time_zone_name",
									"value": "Singapore+Standard+Time"
								},
								{
									"key": "execution_time",
									"value": "1660179095293"
								},
								{
									"key": "next_execution_time",
									"value": "1660179120000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search report schedules",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
									"\r",
									"    const name = jsonData.data[0].name;\r",
									"    pm.environment.set(\"report_schedule_name\", name.toString());\r",
									"\r",
									"    const id = jsonData.data[0].id;\r",
									"    pm.environment.set(\"report_schedule_id\", id);\r",
									"\r",
									"    const templateId = jsonData.data[0].templateId;\r",
									"    pm.environment.set(\"report_schedule_template_id\", templateId.toString());\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/schedules/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"schedules",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 896,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateId\": 1,\n            \"templateName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"storageUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/reports/20220727/report%20template%20name%204ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"fileName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"overridden\": \"{\\\"tenantId\\\":\\\"guid\\\",\\\"subscriptionId\\\":\\\"guid\\\",\\\"projectId\\\":\\\"guid\\\",\\\"fromDate\\\":\\\"2022-07-26T02:25:46.444Z\\\",\\\"toDate\\\":\\\"2022-08-06T02:25:46.444Z\\\"}\",\n            \"createdUtc\": \"2022-07-27T02:26:23:0389\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Download reports by schedule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objectType\": \"schedule\",\r\n    \"scheduleNames\": [\"{{report_schedule_name}}\"],\r\n    \"templateId\": {{report_schedule_template_id}},\r\n    \"scheduleIds\": [\"{{report_schedule_id}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/schedules/export",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"schedules",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search report schedules by template id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true,\r\n    \"filter\": \"{\\\"and\\\":[{\\\"queryKey\\\":\\\"templateId\\\",\\\"fieldTitle\\\":\\\"Template\\\",\\\"queryType\\\":\\\"number\\\",\\\"dateFormat\\\":\\\"\\\",\\\"showTime\\\":false,\\\"operationText\\\":\\\"COMMON.FILTER.SELECT_OPERATOR.EQUALS\\\",\\\"operation\\\":\\\"eq\\\",\\\"queryValue\\\":{{report_template_id}}}]}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/schedules/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"schedules",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 896,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateId\": 1,\n            \"templateName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"storageUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/reports/20220727/report%20template%20name%204ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"fileName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"overridden\": \"{\\\"tenantId\\\":\\\"guid\\\",\\\"subscriptionId\\\":\\\"guid\\\",\\\"projectId\\\":\\\"guid\\\",\\\"fromDate\\\":\\\"2022-07-26T02:25:46.444Z\\\",\\\"toDate\\\":\\\"2022-08-06T02:25:46.444Z\\\"}\",\n            \"createdUtc\": \"2022-07-27T02:26:23:0389\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Reports By Job ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true,\r\n    \"filter\": \"{\\\"and\\\":[{\\\"queryKey\\\":\\\"scheduleId\\\",\\\"fieldTitle\\\":\\\"Template\\\",\\\"queryType\\\":\\\"number\\\",\\\"dateFormat\\\":\\\"\\\",\\\"showTime\\\":false,\\\"operationText\\\":\\\"COMMON.FILTER.SELECT_OPERATOR.EQUALS\\\",\\\"operation\\\":\\\"eq\\\",\\\"queryValue\\\":{{schedule_id}}}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"search"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"durationInMilisecond\": 896,\n    \"totalCount\": 1,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"templateId\": 1,\n            \"templateName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e\",\n            \"storageUrl\": \"/sta/files/0e79433ef36b1410865000f91313348c/reports/20220727/report%20template%20name%204ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"fileName\": \"report template name 4ab32b44-4954-453c-8f09-05d32dab843e_20220727022621.xlsx\",\n            \"overridden\": \"{\\\"tenantId\\\":\\\"guid\\\",\\\"subscriptionId\\\":\\\"guid\\\",\\\"projectId\\\":\\\"guid\\\",\\\"fromDate\\\":\\\"2022-07-26T02:25:46.444Z\\\",\\\"toDate\\\":\\\"2022-08-06T02:25:46.444Z\\\"}\",\n            \"createdUtc\": \"2022-07-27T02:26:23:0389\",\n            \"outputType\": {\n                \"id\": \"EXCELOPENXML\",\n                \"name\": \"Excel (.xlsx)\",\n                \"extension\": \".xlsx\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Update recurring job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    pm.environment.set(\"schedule_id\", id);\r",
									"    pm.expect(jsonData.templates.length).to.equal(2);\r",
									"    console.log(jsonData.templates);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler name updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_report_id}}\",\r\n    \"templates\": [{{report_template_id_3}}, {{report_template_schedule}}],\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Every 50 seconds\",\n    \"templateId\": 1,\n    \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n    \"isSwitchedToCron\": true,\n    \"cron\": \"*/50 * * * * ?\",\n    \"timeZoneName\": \"Singapore Standard Time\",\n    \"endpoint\": \"rpt/reports/generate\",\n    \"start\": \"2022-07-31T23:58:44:0180\",\n    \"end\": \"2022-08-20T23:58:44:0180\"\n}"
						}
					]
				},
				{
					"name": "Update recurring job - SEND - FAIL - jobs null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler name send updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"period\": \"*-2y\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND - FAIL - jobs empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [],\r\n    \"period\": \"*-2y\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND - FAIL - period null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND - FAIL - period empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler send name updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"period\": \"\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND - FAIL - period invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler name send updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"period\": \"1123kjnaskd\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    pm.environment.set(\"schedule_send_id\", id);\r",
									"    pm.expect(jsonData.type).to.equal('SEND');\r",
									"    pm.expect(jsonData.period).to.equal('*-2y');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"scheduler name send updated_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_send_id}}\",\r\n    \"jobs\": [{{schedule_id}}],\r\n    \"period\": \"*-2y\",\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/50 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Update recurring job - SEND - FAIL - jobs null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"op\" : \"replace\", \r\n \"path\":\"/jobs\",\r\n    \"value\": null,\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Update recurring job - SEND - FAIL - jobs empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"op\" : \"replace\", \r\n \"path\":\"/jobs\",\r\n    \"value\": [],\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Update recurring job - SEND - FAIL - period null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"op\" : \"replace\", \r\n \"path\":\"/period\",\r\n    \"value\": null,\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Update recurring job - SEND - FAIL - period empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"op\" : \"replace\", \r\n \"path\":\"/period\",\r\n    \"value\": \"\",\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND - FAIL - period invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'ERROR.ENTITY.VALIDATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"op\" : \"replace\", \r\n \"path\":\"/period\",\r\n    \"value\": \"123cz\",\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recurring job - SEND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    pm.environment.set(\"schedule_send_id\", id);\r",
									"    pm.expect(jsonData.type).to.equal('SEND');\r",
									"    pm.expect(jsonData.period).to.equal('*-2y');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"op\" : \"replace\", \r\n \"path\":\"/period\",\r\n    \"value\": \"*-2y\",\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_send_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_send_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateId\": {{report_template_id_1}},\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{schedule_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{schedule_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Every 30 seconds\",\n    \"templateId\": 1,\n    \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n    \"isSwitchedToCron\": true,\n    \"cron\": \"*/30 * * * * ?\",\n    \"timeZoneName\": \"Singapore Standard Time\",\n    \"endpoint\": \"rpt/reports/generate\",\n    \"start\": \"2022-07-31T23:58:44:0180\",\n    \"end\": \"2022-08-20T23:58:44:0180\",\n    \"template\": {\n        \"id\": 1,\n        \"name\": \"report template name 3d04dd38-791f-438d-bc1e-dbffc9170279\"\n    }\n}"
						}
					]
				},
				{
					"name": "Generate report fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templates\": [999],\r\n    \"dateTimeFormat\": \"yyyy-MM-dd HH:mm:ss\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/reports/generate?job_id={{job_id_1}}&time_zone_name=Singapore+Standard+Time&execution_time=1660179095293&next_execution_time=1660179120000&previous_execution_time=1660177095293",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"reports",
								"generate"
							],
							"query": [
								{
									"key": "job_id",
									"value": "{{job_id_1}}"
								},
								{
									"key": "time_zone_name",
									"value": "Singapore+Standard+Time"
								},
								{
									"key": "execution_time",
									"value": "1660179095293"
								},
								{
									"key": "next_execution_time",
									"value": "1660179120000"
								},
								{
									"key": "previous_execution_time",
									"value": "1660177095293"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rerun failed job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"jobId\": \"{{job_id_1}}\",\r\n    \"templateId\": {{report_template_id_1}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/rerun",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"rerun"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"132a6e78-9e16-4efe-97be-867694858d8b\",\n        \"cron\": \"*/50 * * * * ?\",\n        \"queue\": \"default\",\n        \"nextExecution\": \"2022-08-11T00:11:00:0000\",\n        \"lastJobId\": \"46\",\n        \"lastJobState\": \"Succeeded\",\n        \"lastExecution\": \"2022-08-11T00:10:57:9930\",\n        \"createdAt\": \"2022-08-11T00:08:58:9910\",\n        \"removed\": false,\n        \"timeZoneId\": \"Asia/Singapore\",\n        \"retryAttempt\": 0\n    },\n    {\n        \"id\": \"1a7778ec-9a61-4447-84d3-9b2580c0e4e0\",\n        \"cron\": \"*/30 * * * * ?\",\n        \"queue\": \"default\",\n        \"nextExecution\": \"2022-08-11T00:11:00:0000\",\n        \"lastJobId\": \"43\",\n        \"lastJobState\": \"Succeeded\",\n        \"lastExecution\": \"2022-08-11T00:10:41:8940\",\n        \"createdAt\": \"2022-08-11T00:02:49:2900\",\n        \"removed\": false,\n        \"timeZoneId\": \"Asia/Singapore\",\n        \"retryAttempt\": 0\n    },\n    {\n        \"id\": \"7028ec6d-92c5-4e13-96a7-6d3c0af75120\",\n        \"cron\": \"*/30 * * * * ?\",\n        \"queue\": \"default\",\n        \"nextExecution\": \"2022-08-11T00:11:00:0000\",\n        \"lastJobId\": \"44\",\n        \"lastJobState\": \"Succeeded\",\n        \"lastExecution\": \"2022-08-11T00:10:41:8940\",\n        \"createdAt\": \"2022-08-11T00:00:06:3950\",\n        \"removed\": false,\n        \"timeZoneId\": \"Asia/Singapore\",\n        \"retryAttempt\": 0\n    },\n    {\n        \"id\": \"97b60f91-3761-41ec-a032-64db72dfb97e\",\n        \"cron\": \"*/30 * * * * ?\",\n        \"queue\": \"default\",\n        \"nextExecution\": \"2022-08-11T00:11:00:0000\",\n        \"lastJobId\": \"45\",\n        \"lastJobState\": \"Succeeded\",\n        \"lastExecution\": \"2022-08-11T00:10:41:8940\",\n        \"createdAt\": \"2022-08-11T00:08:11:2940\",\n        \"removed\": false,\n        \"timeZoneId\": \"Asia/Singapore\",\n        \"retryAttempt\": 0\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Delete Template & Storage & Schedule",
			"item": [
				{
					"name": "Delete template fail (being used)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('detailCode', 'REPORT.TEMPLATE.ID.BEING_USED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {{report_template_id_1}}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring job - REPORT AND SEND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    const id = jsonData.id;\r",
									"    const jobId = jsonData.jobId;\r",
									"    pm.environment.set(\"schedule_id_delete\", id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"scheduler name_{{report_template_id_1}} {{$guid}}\",\r\n    \"type\": \"{{schedule_type_report_id}}\",\r\n    \"templates\": [\r\n        {{report_template_id_1}}\r\n    ],\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\",\r\n    \"contacts\": [\r\n        {\r\n            \"objectId\": \"{{contact_id}}\",\r\n            \"objectType\": \"{{schedule_contact_type}}\"\r\n        },\r\n        {\r\n            \"objectId\": \"{{contact_group_id}}\",\r\n            \"objectType\": \"{{schedule_contact_group_type}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": [
						{
							"name": "Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Every 30 seconds\",\n    \"templateId\": 1,\n    \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n    \"isSwitchedToCron\": true,\n    \"cron\": \"*/30 * * * * ?\",\n    \"timeZoneName\": \"Singapore Standard Time\",\n    \"endpoint\": \"rpt/reports/generate\",\n    \"start\": \"2022-07-31T23:58:44:0180\",\n    \"end\": \"2022-08-20T23:58:44:0180\",\n    \"jobId\": \"132a6e78-9e16-4efe-97be-867694858d8b\"\n}"
						}
					]
				},
				{
					"name": "Delete schedule success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{{schedule_id_delete}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create template (API source single & Native storage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request has response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.environment.set(\"report_template_id_1_delete\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PDF => .pdf\r",
									"// WORD => .doc\r",
									"// EXCEL => .xls\r",
									"// WORDOPENXML => .docx\r",
									"// EXCELOPENXML => .xlsx\r",
									"// HTML5 => .html"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"API_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"endpoint\": \"{{local_function_host}}/fnc/rpt/mockdata/{{data_id_1}}\",\r\n            \"method\": \"GET\",\r\n            \"query\": \"start=@fromDate&end=@toDate\",\r\n            \"headers\": {\r\n                \"x-api-key\": \"{{function_key}}\"\r\n            },\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete template success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(`Request has response`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"    pm.expect(jsonData.isSuccess).to.be.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {{report_template_id_1_delete}}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fetch Entity",
			"item": [
				{
					"name": "Search Template To Fetch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Fetch response has data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"array\").to.not.empty;\r",
									"    const data_0 = jsonData.data[0];\r",
									"    pm.expect(data_0).to.have.property(\"id\");\r",
									"    pm.environment.set(\"fetch_report_template_id\", data_0.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Template By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Fetch response has data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\", pm.environment.get(\"fetch_report_template_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/rpt/templates/{{fetch_report_template_id}}/fetch",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"{{fetch_report_template_id}}",
								"fetch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Fetch Template By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"wrong_id\", 9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/rpt/templates/{{wrong_id}}/fetch",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"{{wrong_id}}",
								"fetch"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Archive - Retrieve Template",
			"item": [
				{
					"name": "Setup data",
					"item": [
						{
							"name": "Search storages",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalCount).to.be.above(0);\r",
											"    const native_storage_id = jsonData.data.find(x => x.typeId === 'NATIVE_STORAGE_SPACE').id;\r",
											"    // const azure_storage_id = jsonData.data.find(x => x.typeId === 'AZURE_BLOB_STORAGE_SPACE').id;\r",
											"    pm.environment.set(\"native_storage_id\", native_storage_id);\r",
											"    // pm.environment.set(\"azure_storage_id\", azure_storage_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/rpt/storages/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"rpt",
										"storages",
										"search"
									]
								}
							},
							"response": [
								{
									"name": "Reponse",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "x-project-id",
												"value": "{{x_project_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": ""
										}
									},
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"durationInMilisecond\": 25,\n    \"totalCount\": 4,\n    \"totalPage\": 1,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": 4,\n            \"name\": \"storage_name_updated\",\n            \"typeId\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"content\": \"{\\\"connectionString\\\":\\\"DefaultEndpointsProtocol=https;AccountName=ydxdev01sea01sa;AccountKey=OMPxMBmQKY5fJNVRFcof6SJLrAea20lDsnpSEkUtCvsFqyMsLAFtt8jmU2nRJhIcv7kJScEwiiwziuW/FSxayg==;EndpointSuffix=core.windows.net\\\",\\\"containerName\\\":\\\"file\\\"}\",\n            \"canEdit\": true,\n            \"canDelete\": true,\n            \"createdUtc\": \"2022-04-07T06:29:54:1581\",\n            \"updatedUtc\": \"2022-04-07T06:31:31:4387\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"storage_name_updated\",\n            \"typeId\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"content\": \"{\\\"connectionString\\\":\\\"DefaultEndpointsProtocol=https;AccountName=ydxdev01sea01sa;AccountKey=OMPxMBmQKY5fJNVRFcof6SJLrAea20lDsnpSEkUtCvsFqyMsLAFtt8jmU2nRJhIcv7kJScEwiiwziuW/FSxayg==;EndpointSuffix=core.windows.net\\\",\\\"containerName\\\":\\\"file\\\"}\",\n            \"canEdit\": true,\n            \"canDelete\": true,\n            \"createdUtc\": \"2022-04-07T06:25:07:6689\",\n            \"updatedUtc\": \"2022-04-07T06:27:27:1113\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"azure_blob_storage\",\n            \"typeId\": \"AZURE_BLOB_STORAGE_SPACE\",\n            \"content\": \"{\\\"connectionString\\\":\\\"DefaultEndpointsProtocol=https;AccountName=ydxdev01sea01sa;AccountKey=OMPxMBmQKY5fJNVRFcof6SJLrAea20lDsnpSEkUtCvsFqyMsLAFtt8jmU2nRJhIcv7kJScEwiiwziuW/FSxayg==;EndpointSuffix=core.windows.net\\\",\\\"containerName\\\":\\\"file\\\"}\",\n            \"canEdit\": true,\n            \"canDelete\": true,\n            \"createdUtc\": \"2022-04-07T06:25:04:1868\",\n            \"updatedUtc\": \"2022-04-07T06:25:04:1868\"\n        },\n        {\n            \"id\": 1,\n            \"name\": \"AHS Storage\",\n            \"typeId\": \"NATIVE_STORAGE_SPACE\",\n            \"canEdit\": false,\n            \"canDelete\": false,\n            \"createdUtc\": \"2022-04-07T06:23:32:3133\",\n            \"updatedUtc\": \"2022-04-07T06:23:32:3133\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Upload api report template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    console.log(jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
											"    pm.expect(jsonData).to.have.property('filePath');\r",
											"    pm.environment.set(\"report_template_file_url\", jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set(\"date_utc\", moment().utc().format(\"yyyyMMDDHHmmss\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "tests/IntegrationTest/AppData/api_report_template.rdlc"
										}
									]
								},
								"url": {
									"raw": "{{storage_host}}/sta/files/report_template/{{date_utc}}",
									"host": [
										"{{storage_host}}"
									],
									"path": [
										"sta",
										"files",
										"report_template",
										"{{date_utc}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload series report template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('filePath');\r",
											"    pm.environment.set(\"report_template_series_file_url\", jsonData.filePath.replace(\"\\\\\",\"/\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "tests/IntegrationTest/AppData/asset_timeseries_report_template.rdlc"
										}
									]
								},
								"url": {
									"raw": "{{storage_host}}/sta/files/report_template/{{date_utc}}",
									"host": [
										"{{storage_host}}"
									],
									"path": [
										"sta",
										"files",
										"report_template",
										"{{date_utc}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get datasets from template file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateFileUrl\": \"{{report_template_series_file_url}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/rpt/templates/datasets",
									"host": [
										"{{host}}"
									],
									"path": [
										"rpt",
										"templates",
										"datasets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Build report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DateTimeFormat\": \"dd/MM/yyyy HH:mm:ss\",\r\n    \"FromDate\": \"2022-01-01 12:12:12\",\r\n    \"ToDate\": \"2022-01-31 12:12:12\",\r\n    \"Template\": {\r\n        \"Id\": 1,\r\n        \"Name\": \"report template name 5f87b2a2-e58a-4202-ba83-48fe98e38053\",\r\n        \"TemplateFileUrl\": \"{{report_template_file_url}}\",\r\n        \"Default\": {\r\n            \"ReportName\": \"report template name 5f87b2a2-e58a-4202-ba83-48fe98e38053\"\r\n        },\r\n        \"DataSetCount\": 1,\r\n        \"StorageId\": 1,\r\n        \"OutputTypeId\": \"EXCELOPENXML\",\r\n        \"CreatedUtc\": \"2022-07-08T07:06:23.3288782\",\r\n        \"UpdatedUtc\": \"2022-07-08T07:06:23.3289207\",\r\n        \"OutputType\": {\r\n            \"Id\": \"EXCELOPENXML\",\r\n            \"Name\": \"Excel (.xlsx)\",\r\n            \"Extension\": \".xlsx\"\r\n        },\r\n        \"Storage\": {\r\n            \"Id\": 1,\r\n            \"Name\": \"AHS Storage\",\r\n            \"TypeId\": \"NATIVE_STORAGE_SPACE\",\r\n            \"Content\": null,\r\n            \"CanEdit\": false,\r\n            \"CanDelete\": false,\r\n            \"CreatedUtc\": \"2022-07-08T07:02:18.9533333\",\r\n            \"UpdatedUtc\": \"2022-07-08T07:02:18.9533333\",\r\n            \"Type\": null\r\n        },\r\n        \"DataSets\": [\r\n            {\r\n                \"Id\": 1,\r\n                \"Name\": \"dataset1\",\r\n                \"DataSourceTypeId\": \"API_DATA_SOURCE\",\r\n                \"DataSourceContent\": \"{\\\"endpoint\\\":\\\"https:6280682a1020d852057ca362.mockapi.ioapireportdata\\\",\\\"method\\\":\\\"GET\\\",\\\"query\\\":\\\"start=@fromDate&end=@toDate\\\",\\\"headers\\\":{\\\"x-api-key\\\":\\\"PMAK-625e5c606db6cc2477c3112f-afe3934efc92085591c118e368988e9357\\\",\\\"x-project-id\\\":\\\"34e5ee62-429c-4724-b3d0-3891bd0a08c9\\\"},\\\"datasetMappings\\\":[{\\\"propName\\\":\\\"default\\\",\\\"dataSetName\\\":\\\"DataSet1\\\"}]}\",\r\n                \"DataSourceType\": {\r\n                    \"Id\": \"API_DATA_SOURCE\",\r\n                    \"Name\": \"Api\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"Data\": [\r\n        {\r\n            \"Name\": \"DataSet1\",\r\n            \"Table\": [\r\n                {\r\n                    \"id\": \"1\",\r\n                    \"name\": \"record 1\"\r\n                },\r\n                {\r\n                    \"id\": \"2\",\r\n                    \"name\": \"record 2\"\r\n                },\r\n                {\r\n                    \"id\": \"3\",\r\n                    \"name\": \"record 3\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_webapp}}/rpt/workers/build",
									"host": [
										"{{host_webapp}}"
									],
									"path": [
										"rpt",
										"workers",
										"build"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create template (API source single & Native storage)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.environment.set(\"report_template_id_1\", jsonData.id);\r",
											"    pm.environment.set(\"report_template_name_1\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// PDF => .pdf\r",
											"// WORD => .doc\r",
											"// EXCEL => .xls\r",
											"// WORDOPENXML => .docx\r",
											"// EXCELOPENXML => .xlsx\r",
											"// HTML5 => .html"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"API_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"endpoint\": \"{{local_function_host}}/fnc/rpt/mockdata/{{data_id_1}}\",\r\n            \"method\": \"GET\",\r\n            \"query\": \"start=@fromDate&end=@toDate\",\r\n            \"headers\": {\r\n                \"x-api-key\": \"{{function_key}}\"\r\n            },\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/rpt/templates",
									"host": [
										"{{host}}"
									],
									"path": [
										"rpt",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create template for generate schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.environment.set(\"report_template_schedule\", jsonData.id);\r",
											"    pm.environment.set(\"report_template_schedule_name\", jsonData.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// PDF => .pdf\r",
											"// WORD => .doc\r",
											"// EXCEL => .xls\r",
											"// WORDOPENXML => .docx\r",
											"// EXCELOPENXML => .xlsx\r",
											"// HTML5 => .html"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"report template name !@#$%$%^^&*(()_++_+,.\\/\\\\\\u01B0{}\\/\\\\|~.\\/,<>? {{$guid}}\",\r\n    \"templateFileUrl\": \"{{report_template_file_url}}\",\r\n    \"outputTypeId\": \"{{output_type_id}}\",\r\n    \"storageId\": {{native_storage_id}},\r\n    \"dataSets\": [{\r\n        \"name\": \"dataset1\",\r\n        \"dataSourceTypeId\": \"API_DATA_SOURCE\",\r\n        \"dataSourceContent\": {\r\n            \"endpoint\": \"{{local_function_host}}/fnc/rpt/mockdata/{{data_id_1}}\",\r\n            \"method\": \"GET\",\r\n            \"query\": \"start=@fromDate&end=@toDate\",\r\n            \"headers\": {\r\n                \"x-api-key\": \"{{function_key}}\"\r\n            },\r\n            \"datasetMappings\": [\r\n                {\r\n                    \"propName\": \"default\",\r\n                    \"dataSetName\": \"DataSet1\"\r\n                }\r\n            ]\r\n        }\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/rpt/templates",
									"host": [
										"{{host}}"
									],
									"path": [
										"rpt",
										"templates"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Should archive template OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Archive Templates returns status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Archive templates has data\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    //for retrieve template",
									"    let dataRetrive = jsonData[jsonData.length - 1]",
									"    let lastValue = 100;",
									"    let retrieve_id = dataRetrive.id;",
									"    retrieve_id = retrieve_id  + lastValue;",
									"    pm.environment.set(\"retrieve_template_id\", retrieve_id);",
									"    pm.environment.set(\"data_set_id\", dataRetrive.dataSets[0].id + lastValue);",
									"",
									"    //for retrieve schedules",
									"    const templateId =  jsonData[0].id;",
									"    pm.environment.set(\"templateid_for_retrieved_schedule\", templateId);",
									"",
									"    pm.environment.set(\"archived_templates_data\", JSON.stringify(JSON.stringify(jsonData)));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"archived_at\", pm.variables.replaceIn(\"{{$isoTimestamp}}\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"archiveTime\": \"{{archived_at}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 200 status if data archive template is OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(`Verify Archive Template`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isSuccess).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": {{archived_templates_data}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Id is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": null,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if TemplateFileUrl is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if OutputType Id is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Storage Id is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": null,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Detail Id is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": null,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": null,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Detail Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Detail has templateId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": null,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Detail has DatasourceTypeId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Template Detail has DatasourceContent is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 5,\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(`Upload File`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const filePath = jsonData.filePath;\r",
									"    var base64Hash = CryptoJS.enc.Utf8.parse(filePath);\r",
									"    var base64 = CryptoJS.enc.Base64.stringify(base64Hash);\r",
									"    pm.environment.set(\"file_url_path\", base64);   \r",
									"});\r",
									"\r",
									"// pm.test(\"upload file should include subscriptionid and projectid\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"//     const json = pm.response.json();\r",
									"//     pm.expect(json.filepath).includes(\"0e79433ef36b1410865000f91313348c\",\"34e5ee62429c4724b3d03891bd0a08c9\")\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "tests/IntegrationTest/AppData/ArchiveProject.zip"
								}
							]
						},
						"url": {
							"raw": "{{storage_host}}/sta/files/zipfolder",
							"host": [
								"{{storage_host}}"
							],
							"path": [
								"sta",
								"files",
								"zipfolder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should retrieve template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"retrieving_template_upn\",\"thanh.tran@yokogawa.com\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Retrieve templates returns status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[\\n        {\\n        \\\"id\\\": {{retrieve_template_id}},\\n        \\\"name\\\": \\\"Name_{{$timestamp}}\\\",\\n        \\\"filePath\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMzA1MTcwNjUxMTAvYXNzZXRfc25hcHNob3RfcmVwb3J0X3RlbXBsYXRlLnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"report template name !@#$%$%^^&*(()_++_+,./\\\\\\\\\\\\\\\\ư{}/\\\\\\\\\\\\\\\\|~./,<>? 1d052031-359d-4caa-9135-d46677032609\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"asset_snapshot_report_template.rdlc\\\",\\n        \\\"createdUtc\\\": \\\"0001-01-01T00:00:00:0000\\\",\\n        \\\"updatedUtc\\\": \\\"0001-01-01T00:00:00:0000\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": {{data_set_id}},\\n                \\\"name\\\": \\\"dataset1\\\",\\n                \\\"templateId\\\": {{retrieve_template_id}},\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"{\\\\\\\"endpoint\\\\\\\":\\\\\\\"aHR0cDovL3JlcG9ydGluZy1mdW5jdGlvbi9mbmMvcnB0L21vY2tkYXRhL2QxYzA0YjEwLTc1NjktNDg2OC1iNzEzLTk3OTgxNzQwODJkOQ==\\\\\\\",\\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\",\\\\\\\"query\\\\\\\":\\\\\\\"start=@fromDate&end=@toDate\\\\\\\",\\\\\\\"headers\\\\\\\":{\\\\\\\"x-api-key\\\\\\\":\\\\\\\"pPXk7Qwpj5Au0H36NXel\\\\\\\"},\\\\\\\"datasetMappings\\\\\\\":[{\\\\\\\"propName\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"dataSetName\\\\\\\":\\\\\\\"DataSet1\\\\\\\"}]}\\\"\\n            }\\n        ]\\n    }\\n]\",\n    \"AdditionalData\": {\n        \"{{retrieve_template_id}}\":{\n            \"FilePath\": \"{{file_url_path}}\",\n            \"ContentPath\": \"cmVwb3J0X3RlbXBsYXRlLzIvYXNzZXRfc25hcHNob3RfcmVwb3J0X3RlbXBsYXRlLnJkbGM=\"\n        }\n    },\n    \"Upn\": \"{{retrieving_template_upn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/retrieve",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"retrieve"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieved template should exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Get Template By ID\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(pm.environment.get(\"retrieve_template_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/{{retrieve_template_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"{{retrieve_template_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify - template Failed - Duplicate id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieve templates returns status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[{\\\"id\\\":{{retrieve_template_id}},\\\"name\\\":\\\"Name_{{$timestamp}}\\\",\\\"templateFileUrl\\\":\\\"L3N0YS9maWxlcy9iNjg3ODI0Zjc2ZDM0OGYzN2JlZDA4ZGE2ZGVkZjZkZi9kYWI1NmY2NDM1MDk0NTYxZGQ1MzA4ZGE2ZTI2ZGI4Yi9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\\"default\\\":\\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\\"storageId\\\":1,\\\"outputTypeId\\\":\\\"EXCELOPENXML\\\",\\\"dataSets\\\":[{\\\"Name\\\":\\\"Test\\\",\\\"TemplateId\\\":12,\\\"DataSourceTypeId\\\":\\\"API_DATA_SOURCE\\\",\\\"DataSourceContent\\\":\\\"test\\\"}]}]\",\n    \"AdditionalData\": {\n        \"{{retrieve_template_id}}\": \"b2tkb25neQ==\"\n    },\n    \"Upn\": \"{{retrieving_template_upn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/templates/retrieve",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"templates",
								"retrieve"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Archive - Retrieve Schedule",
			"item": [
				{
					"name": "Setup data",
					"item": [
						{
							"name": "Search cron expressions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cron_expression_id = jsonData.data.find(x => x.code === '30_seconds').id;\r",
											"    pm.environment.set(\"cron_expression_id\", cron_expression_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const current = new Date();\r",
											"const from_date = new Date(new Date().setDate(current.getDate() - 10));\r",
											"const to_date = new Date(new Date().setDate(current.getDate() + 10));\r",
											"\r",
											"pm.environment.set('start', from_date);\r",
											"pm.environment.set('end', to_date);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pageIndex\": 0,\r\n    \"pageSize\": 20,\r\n    \"clientOverride\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{scheduler_host}}/sch/cronexpressions/search",
									"host": [
										"{{scheduler_host}}"
									],
									"path": [
										"sch",
										"cronexpressions",
										"search"
									]
								}
							},
							"response": [
								{
									"name": "Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"durationInMilisecond\": 463,\n    \"totalCount\": 23,\n    \"totalPage\": 2,\n    \"pageSize\": 20,\n    \"pageIndex\": 0,\n    \"clientOverride\": false,\n    \"data\": [\n        {\n            \"id\": \"d420433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_second\",\n            \"name\": \"Every second\",\n            \"cron\": \"*/1 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2633\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2633\"\n        },\n        {\n            \"id\": \"da20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_seconds\",\n            \"name\": \"Every 2 seconds\",\n            \"cron\": \"*/2 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2700\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2700\"\n        },\n        {\n            \"id\": \"e020433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_seconds\",\n            \"name\": \"Every 5 seconds\",\n            \"cron\": \"*/5 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2733\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2733\"\n        },\n        {\n            \"id\": \"e620433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_seconds\",\n            \"name\": \"Every 10 seconds\",\n            \"cron\": \"*/10 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2766\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2766\"\n        },\n        {\n            \"id\": \"ec20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_seconds\",\n            \"name\": \"Every 15 seconds\",\n            \"cron\": \"*/15 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2800\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2800\"\n        },\n        {\n            \"id\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"30_seconds\",\n            \"name\": \"Every 30 seconds\",\n            \"cron\": \"*/30 * * * * ?\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2833\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2833\"\n        },\n        {\n            \"id\": \"f820433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_minute\",\n            \"name\": \"Every minute\",\n            \"cron\": \"0 */1 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2866\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2866\"\n        },\n        {\n            \"id\": \"fe20433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_minutes\",\n            \"name\": \"Every 2 minutes\",\n            \"cron\": \"0 */2 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2900\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2900\"\n        },\n        {\n            \"id\": \"0421433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_minutes\",\n            \"name\": \"Every 5 minutes\",\n            \"cron\": \"0 */5 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"0a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_minutes\",\n            \"name\": \"Every 10 minutes\",\n            \"cron\": \"0 */10 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"1021433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_minutes\",\n            \"name\": \"Every 15 minutes\",\n            \"cron\": \"0 */15 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2933\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2933\"\n        },\n        {\n            \"id\": \"1621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"30_minutes\",\n            \"name\": \"Every 30 minutes\",\n            \"cron\": \"0 */30 * * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2966\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2966\"\n        },\n        {\n            \"id\": \"1c21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_hour\",\n            \"name\": \"Every hour\",\n            \"cron\": \"0 0 */1 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:2966\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:2966\"\n        },\n        {\n            \"id\": \"2221433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_hours\",\n            \"name\": \"Every 2 hours\",\n            \"cron\": \"0 0 */2 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3000\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3000\"\n        },\n        {\n            \"id\": \"2621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_hours\",\n            \"name\": \"Every 5 hours\",\n            \"cron\": \"0 0 */5 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3033\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3033\"\n        },\n        {\n            \"id\": \"2a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"10_hours\",\n            \"name\": \"Every 10 hours\",\n            \"cron\": \"0 0 */10 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3033\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3033\"\n        },\n        {\n            \"id\": \"2e21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"15_hours\",\n            \"name\": \"Every 15 hours\",\n            \"cron\": \"0 0 */15 * * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3066\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3066\"\n        },\n        {\n            \"id\": \"3221433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"1_day\",\n            \"name\": \"At 12:00 AM\",\n            \"cron\": \"0 0 0 */1 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3100\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3100\"\n        },\n        {\n            \"id\": \"3621433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"2_days\",\n            \"name\": \"At 12:00 AM, every 2 days\",\n            \"cron\": \"0 0 0 */2 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3133\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3133\"\n        },\n        {\n            \"id\": \"3a21433e-f36b-1410-804f-0081288b1a6f\",\n            \"code\": \"5_days\",\n            \"name\": \"At 12:00 AM, every 5 days\",\n            \"cron\": \"0 0 0 */5 * *\",\n            \"createdUtc\": \"2022-08-10T23:55:01:3166\",\n            \"updatedUtc\": \"2022-08-10T23:55:01:3166\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create recurring job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request success\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request has response\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    const id = jsonData.id;\r",
											"    const jobId = jsonData.jobId;\r",
											"    pm.environment.set(\"schedule_id\", id);\r",
											"    pm.environment.set(\"job_id_1\", jobId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"scheduler name_{{report_template_id_1}}\", \r\n \"type\":\"{{schedule_type_report_id}}\",\r\n    \"templates\": [{{report_template_id_1}}],\r\n    \"cronExpressionId\": \"{{cron_expression_id}}\",\r\n    \"isSwitchedToCron\": true,\r\n    \"cron\": \"*/30 * * * * ?\",\r\n    \"timeZoneName\": \"Singapore Standard Time\",\r\n    \"start\": \"{{start}}\",\r\n    \"end\": \"{{end}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/rpt/schedules",
									"host": [
										"{{host}}"
									],
									"path": [
										"rpt",
										"schedules"
									]
								}
							},
							"response": [
								{
									"name": "Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": 4,\n    \"name\": \"Every 30 seconds\",\n    \"templateId\": 1,\n    \"cronExpressionId\": \"f220433e-f36b-1410-804f-0081288b1a6f\",\n    \"isSwitchedToCron\": true,\n    \"cron\": \"*/30 * * * * ?\",\n    \"timeZoneName\": \"Singapore Standard Time\",\n    \"endpoint\": \"rpt/reports/generate\",\n    \"start\": \"2022-07-31T23:58:44:0180\",\n    \"end\": \"2022-08-20T23:58:44:0180\",\n    \"jobId\": \"132a6e78-9e16-4efe-97be-867694858d8b\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Should archive schedule OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Archive schedules returns status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Archive schedules has data\", function () {",
									"    const jsonData = pm.response.json();",
									"    let id_schedule_new = jsonData[jsonData.length - 1].id;",
									"    id_schedule_new = id_schedule_new + 100;",
									"    pm.environment.set(\"report_schedule_id_retrieve\",id_schedule_new);",
									"",
									"    pm.environment.set(\"archived_schedules_data\", JSON.stringify(JSON.stringify(jsonData)));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"archived_at\", pm.variables.replaceIn(\"{{$isoTimestamp}}\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"archiveTime\": \"{{archived_at}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 200 status if data archive schedule is OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(`Verify Archive Schedule`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isSuccess).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": {{archived_schedules_data}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Schedule Id is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[\\n        {\\n            \\\"id\\\": null,\\n            \\\"name\\\": \\\"scheduler name updated_1004\\\",\\n            \\\"templateId\\\": 1004,\\n            \\\"cronExpressionId\\\": \\\"6198433e-f36b-1410-8c3d-0043b9e21982\\\",\\n            \\\"cronDescription\\\": \\\"Every 50 seconds\\\",\\n            \\\"isSwitchedToCron\\\": true,\\n            \\\"cron\\\": \\\"*/50 * * * * ?\\\",\\n            \\\"timeZoneName\\\": \\\"Singapore Standard Time\\\",\\n            \\\"endpoint\\\": \\\"http://reporting-service-vnext/rpt/reports/generate\\\",\\n            \\\"start\\\": \\\"2023-04-29T04:27:26:4220\\\",\\n            \\\"end\\\": \\\"2023-05-19T04:27:26:4220\\\",\\n            \\\"jobId\\\": \\\"1e0be0fe-991f-4863-b264-dec4eaf96313\\\",\\n            \\\"method\\\": \\\"POST\\\"\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Schedule Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \" [\\n        {\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"\\\",\\n        \\\"templateFileUrl\\\": \\\"L3N0YS9maWxlcy8wZTc5NDMzZWYzNmIxNDEwODY1MDAwZjkxMzEzMzQ4Yy8zNGU1ZWU2MjQyOWM0NzI0YjNkMDM4OTFiZDBhMDhjOS9yZXBvcnRfdGVtcGxhdGUvMjAyMjExMDIyMjQ4NDQvU3VzaGlfc2Vuc29yX3Rlc3RfZW52LnJkbGM=\\\",\\n        \\\"default\\\": \\\"{\\\\\\\"ReportName\\\\\\\":\\\\\\\"default\\\\\\\"}\\\",\\n        \\\"storageId\\\": 1,\\n        \\\"outputTypeId\\\": \\\"EXCELOPENXML\\\",\\n        \\\"fileName\\\": \\\"Sushi_sensor_test_env.rdlc\\\",\\n        \\\"dataSets\\\": [\\n            {\\n                \\\"id\\\": 2,\\n                \\\"name\\\": \\\"Test\\\",\\n                \\\"templateId\\\": 5,\\n                \\\"dataSourceTypeId\\\": \\\"API_DATA_SOURCE\\\",\\n                \\\"dataSourceContent\\\": \\\"test\\\",\\n                \\\"deleted\\\": false\\n            }\\n        ]\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Schedule TemplateId is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[\\n        {\\n            \\\"id\\\": 2,\\n            \\\"name\\\": \\\"scheduler name updated_1004\\\",\\n            \\\"templates\\\": null,\\n            \\\"cronExpressionId\\\": \\\"6198433e-f36b-1410-8c3d-0043b9e21982\\\",\\n            \\\"cronDescription\\\": \\\"Every 50 seconds\\\",\\n            \\\"isSwitchedToCron\\\": true,\\n            \\\"cron\\\": \\\"*/50 * * * * ?\\\",\\n            \\\"timeZoneName\\\": \\\"Singapore Standard Time\\\",\\n            \\\"endpoint\\\": \\\"http://reporting-service-vnext/rpt/reports/generate\\\",\\n            \\\"start\\\": \\\"2023-04-29T04:27:26:4220\\\",\\n            \\\"end\\\": \\\"2023-05-19T04:27:26:4220\\\",\\n            \\\"jobId\\\": \\\"1e0be0fe-991f-4863-b264-dec4eaf96313\\\",\\n            \\\"method\\\": \\\"POST\\\"\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Schedule Cron is Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[\\n        {\\n            \\\"id\\\": 2,\\n            \\\"name\\\": \\\"scheduler name updated_1004\\\",\\n            \\\"templateId\\\": 1004,\\n            \\\"cronExpressionId\\\": \\\"6198433e-f36b-1410-8c3d-0043b9e21982\\\",\\n            \\\"cronDescription\\\": \\\"Every 50 seconds\\\",\\n            \\\"isSwitchedToCron\\\": true,\\n            \\\"cron\\\": \\\"*/50g gsdg\\\",\\n            \\\"timeZoneName\\\": \\\"Singapore Standard Time\\\",\\n            \\\"endpoint\\\": \\\"http://reporting-service-vnext/rpt/reports/generate\\\",\\n            \\\"start\\\": \\\"2023-04-29T04:27:26:4220\\\",\\n            \\\"end\\\": \\\"2023-05-19T04:27:26:4220\\\",\\n            \\\"jobId\\\": \\\"1e0be0fe-991f-4863-b264-dec4eaf96313\\\",\\n            \\\"method\\\": \\\"POST\\\"\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return 400 status if Schedule TimezoneInfo is Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The request has status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[\\n        {\\n            \\\"id\\\": 2,\\n            \\\"name\\\": \\\"scheduler name updated_1004\\\",\\n            \\\"templateId\\\": 1004,\\n            \\\"cronExpressionId\\\": \\\"6198433e-f36b-1410-8c3d-0043b9e21982\\\",\\n            \\\"cronDescription\\\": \\\"Every 50 seconds\\\",\\n            \\\"isSwitchedToCron\\\": true,\\n            \\\"cron\\\": \\\"*/50 * * * * ?\\\",\\n            \\\"timeZoneName\\\": \\\"Singapore time876867\\\",\\n            \\\"endpoint\\\": \\\"http://reporting-service-vnext/rpt/reports/generate\\\",\\n            \\\"start\\\": \\\"2023-04-29T04:27:26:4220\\\",\\n            \\\"end\\\": \\\"2023-05-19T04:27:26:4220\\\",\\n            \\\"jobId\\\": \\\"1e0be0fe-991f-4863-b264-dec4eaf96313\\\",\\n            \\\"method\\\": \\\"POST\\\"\\n        }\\n    ]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/archive/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"archive",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should retrieve schedule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"retrieving_schedule_upn\",\"thanh.tran@yokogawa.com\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Retrieve schedules returns status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[{\\\"id\\\":{{report_schedule_id_retrieve}},\\\"name\\\":\\\"Retrieved_schedule_{{$timestamp}}\\\",\\\"type\\\":\\\"{{schedule_type_report_id}}\\\",\\\"templates\\\":[{{templateid_for_retrieved_schedule}}],\\\"cronExpressionId\\\":\\\"{{cron_expression_id}}\\\",\\\"cronDescription\\\":\\\"Every50seconds\\\",\\\"isSwitchedToCron\\\":true,\\\"cron\\\":\\\"*/50 * * * * ?\\\",\\\"timeZoneName\\\":\\\"Singapore Standard Time\\\",\\\"endpoint\\\":\\\"http://reporting-service-vnext/rpt/reports/generate\\\",\\\"start\\\":\\\"{{start}}\\\",\\\"end\\\":\\\"{{end}}\\\",\\\"jobId\\\":\\\"{{$guid}}\\\",\\\"method\\\":\\\"POST\\\",\\\"createdUtc\\\":\\\"2023-05-23T06:50:03:0206\\\",\\\"updatedUtc\\\":\\\"2023-05-23T06:50:03:0206\\\"}]\",\n    // \"AdditionalData\": {\n    //     \"10\": \"b2tkb25neQ==\"\n    // },\n    \"Upn\": \"{{retrieving_schedule_upn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/retrieve",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"retrieve"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieved schedule should exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Get Schedule By ID\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(pm.environment.get(\"report_schedule_id_retrieve\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/{{report_schedule_id_retrieve}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"{{report_schedule_id_retrieve}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify - schedule  Failed - Duplicate id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieve templates returns status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Data\": \"[{\\\"id\\\":{{report_schedule_id_retrieve}},\\\"name\\\":\\\"Retrieved_schedule_{{$timestamp}}\\\",\\\"templateId\\\":{{templateid_for_retrieved_schedule}},\\\"cronExpressionId\\\":\\\"{{cron_expression_id}}\\\",\\\"cronDescription\\\":\\\"Every50seconds\\\",\\\"isSwitchedToCron\\\":true,\\\"cron\\\":\\\"*/50 * * * * ?\\\",\\\"timeZoneName\\\":\\\"Singapore Standard Time\\\",\\\"endpoint\\\":\\\"http://reporting-service-vnext/rpt/reports/generate\\\",\\\"start\\\":\\\"{{start}}\\\",\\\"end\\\":\\\"{{end}}\\\",\\\"jobId\\\":\\\"{{$guid}}\\\",\\\"method\\\":\\\"POST\\\"}]\",\n    // \"AdditionalData\": {\n    //     \"10\": \"b2tkb25neQ==\"\n    // },\n    \"Upn\": \"{{retrieving_schedule_upn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rpt/schedules/retrieve",
							"host": [
								"{{host}}"
							],
							"path": [
								"rpt",
								"schedules",
								"retrieve"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}